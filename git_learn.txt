1.集中式与分布式比较

　　　集中式的代表是SVN和CVS, 集中式顾名思义需要一个中央服务器，代码存放于中央服务器，工作时需要从中央服务器把代码下下来。集中式最大的毛病是需要联网才能工作，网速慢的情况下会让人抓狂。同时由于需要中央服务器，一旦中央服务器宕了，那你就可以回家休息了，呵呵。

　　    分布式的代表是GIT，分布式顾名思义每个人的电脑都保存这一份完整的代码库，没有网络也可以工作，当有网时再把修改推送给对方从而实现多人同时开发。实际应用中，也需要有一个中央服务器，而它的作用仅仅是方便大家的代码交换，没有它一样可以工作。同时，GIT的强大之处还在于它的分支管理能力。随着时代的进步，集中式的版本管理系统正在逐步被替代。

 

2.在Windows上安装GIT

　　     GIT最早是运行在Linux上的，后来慢慢移植到了Windows平台。GIT下载安装后，需要配置用户信息：

　　　　git config --global user.name "xxx"

　　　　git config --global user.email "xxx@xxx.com"

　　　 "--global"参数表示全局配置，配置之后电脑上的所有库默认都使用该配置

 

3.创建版本库

　　　　版本库又名仓库（repository），可以理解为目录，目录里的所有文件都会被GIT管理起来，所有对文件的增、删、改、查都会被GIT所记录，方便在将来能够查找还原。

　　　　创建版本库很容易，先创建一个文件夹：

　　　　　　

　　　　 初始化文件夹，将其变成GIT可以管理的仓库：

　　　　　　

　　　　  当当当当，版本库已经创建好了，细心的读者会发现多了一个.git目录，有人说我怎么没看到，因为这时受保护文件，

　　　　  里面保存了GIT的配置项，可以通过“组织”——>“文件夹和搜索选项”——>“查看”——>"显示隐藏的文件“（或者：ls -ah）

　　　　  来查看，同时，GIT已经为我们创建了一个默认的“master”分支。

     　　　把文件添加进版本库：　　

　　　　　　 说明：所有的版本库包括GIT智能管理纯文本文件，比如TXT，程序代码，网页等，而 像图片、视频、音频、world等二进制文件

　　　　　　GIT只能把改动串起来，比如100k增加到200k，而不能知道具体改了什么。

　　　　　　在git_practice_blog文件夹下新建一个readme.txt文件：

　　　　　　

　　　　　　把文件添加到仓库：

　　　　　　

　　　　　　　　没有任何提示说明添加成功，linux哲学：“没有消息就是好消息”

　　　　　　把文件提交到仓库：

　　　　　　

　　　　　　 　　“-m”表示为本次提交添加说明，建议不要省略。同时，git commit会告诉你文件的状态

 

　　　　　　总结：

　　　　　　　　git config --global  user.name/email "xxx"：全局配置用户名和email

　　　　　　　　mkdir <directoryName>：创建文件夹

　　　　　　　　touch <fileName>：创建文件

　　　　　　　　pwd：查看当前路径

　　　　　　　　git init：初始化git仓库

　　　　　　　　ls -ah：查看隐藏目录

　　　　　　　　git add <fileName>：添加文件进仓库

　　　　　　　　git commit -m “<comment>”：提交文件到仓库

 

4.提交文件

　　　　修改readme.txt文件：

　　　　　　

　　　　要查看修改了什么，可以用“git status”

　　　　　　

　　　　　　“git status”告诉你readme.txt文件被修改了，修改还没有被添加进仓库，可以用“git add”添加：

　　　　　　

　　　　　　用“git status”查看，发现文件已添加进仓库但还没提交，可以用“git commit”来提交：

　　　　　　

　　　　　　此时用“git status”查看，发现工作区已空空如也。另外，当你需要查看具体的修改时，可以用“git diff”：

　　　　　　

　　　　　　总结：

　　　　　　git status：查看文件状态

　　　　　　git diff <fileName>：查看文件具体修改

 

5.回退版本

　　　　　现在修改readme.txt：

　　　　　　

　　　　　　在工作中你不可能记住每次的修改，不然还要GIT干什么，要查看修改记录，可以用“git log”：

　　　　　　

　　　　　　“git log”能告诉你每次的提交记录，commit后面的一串是GIT生成的本次提交的id，当然，如果你觉得太凌乱可以添加参数“--pretty=oneline”：

　　　　　　

　　　　　　或者“--oneline --decotate --graph”：

　　　　　　

　　　　　　要回退到上一个版本，怎么做呢？首先GIT需要知道当前是哪个版本，在GIT中用HEAD指代当前版本，那么上一个版本就是HEAD^上上个版本就是HEAD^^，上10个版本怎么写呢，当然不可能写10个^，可以用HEAD~10。要回退到上一版本，可以用“git reset --hard HEAD^”：

　　　　　　

　　　　　　再用“git log --oneline”查看一下：

　　　　　　

　　　　　　已经回退到上一次修改，现在你后悔了，你要回到回退前怎么办，如果你没有关闭git bash窗口，可以找到上次的commit id，然后用

　　　　　　“git rest --hard commitId“：

　　　　　　

　　　　　　怎么样，又回到了从前。如果你关闭了git bash窗口，后者第二天又后悔了怎么办，办法总是有的，可以用“git reflog”：

　　　　　　　

　　　　　　　它会告诉你每次的操作。

　　　　　　　GIT的版本回退非常快，应为在GIT中，有一个指向当前版本的HEAD指针，回退时只是把指针指向回退的版本，顺便再

　　　　　　　把工作区给更新了。

　　　　　　　总结：

　　　　　　　git log：查看历史提交记录

　　　　　　　git log --oneline --decorate --graph：简略直观显示提交记录

　　　　　　    git reset --hard HEAD^：

　　　　　　　git reset --hard HEAD~10：

　　　　　　    git reset --hard commitId：回退版本

　　　　　　　git reflog：查看操作记录·